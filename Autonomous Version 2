package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.I2cAddr;
import com.qualcomm.robotcore.hardware.I2cDevice;
import com.qualcomm.robotcore.hardware.I2cDeviceSynch;
import com.qualcomm.robotcore.hardware.I2cDeviceSynchImpl;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;

@Autonomous(name="Autonomous Version 2", group="Linear Opmode")
//@Disabled
public class Autonomous2 extends LinearOpMode {
    int VuMarkID = -1;
    boolean VuMarkFinished = false;
    boolean colorSensorFinished = false;
    VuforiaLocalizer vuforia;
    VuforiaTrackables relicTrackables;
    VuforiaTrackable relicTemplate;
    RelicRecoveryVuMark vuMark;

    byte[] colorCcache;
    int colorNumber;

    I2cDevice colorC;
    I2cDeviceSynch colorCreader;

    @Override public void runOpMode(){
        initializeVuMark(true);
        initializeColorSensor();
        telemetry.update();
        waitForStart();

        while (opModeIsActive()) {
            //telemetry.addData("gamepad1A: ", gamepad1.a);
            if(!VuMarkFinished) {
                findVuMark();
            }
            if(!colorSensorFinished){
                readColorNumber();
            }
            displayVuMarkID();
            displayColorNumber();
            telemetry.update();
        }
    }

    public void initializeVuMark(boolean cameraEnabled){;
        VuforiaLocalizer.Parameters parameters;
        if(cameraEnabled)
            parameters = new VuforiaLocalizer.Parameters(hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName()));
        else
            parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = "AbvEHy7/////AAAAGRmT0kowlEESsHWO52+1yK4RGV8QifRa3mmkwcy05kelV2/3fGxhhkPmURHfIgTA9Y2lw4zf1WZ5DkPv5DVfLSYy/cafwHkCriSeJep+5xwa2qRpMi3aDAncmXGB5ZoWw3hHK5upIXBj/aX9q9cNKN2ZcE05dMGaJp7ykHLfYXeVhL7fepFvOhLj8szG5kzE7myp2Lc2pgaDb8iGGhijznojUSg0GcSIQC7cEFRacsCUN7f4cIhHdK2c+Lv3sZP+NlyRliGoz8ICS4AgKDTXRVIFIDZ0h96T4rGjFxInT5JsK2tGqilGckVRcDXnGZPG6KR3LIdaa2T72mSoww/GusZhWrYSiS15oge6kr1Vv2UJ";

        parameters.cameraDirection = VuforiaLocalizer.CameraDirection.BACK;
        this.vuforia = ClassFactory.createVuforiaLocalizer(parameters);

        relicTrackables = this.vuforia.loadTrackablesFromAsset("RelicVuMark");
        relicTemplate = relicTrackables.get(0);

        relicTrackables.activate();
    }

    public void findVuMark(){
        vuMark = RelicRecoveryVuMark.from(relicTemplate);
        if (vuMark != RelicRecoveryVuMark.UNKNOWN) {
            if (vuMark == RelicRecoveryVuMark.LEFT) VuMarkID = 1;
            else if (vuMark == RelicRecoveryVuMark.CENTER) VuMarkID = 2;
            else VuMarkID = 3;
            VuMarkFinished = true;
            deactiveVuMark();
        }
    }

    public void deactiveVuMark(){
        relicTrackables.deactivate();
    }

    public void displayVuMarkID(){
        if(VuMarkID==1) telemetry.addData("VuMarkID", "LEFT");
        else if(VuMarkID==2) telemetry.addData("VuMarkID", "CENTER");
        else if(VuMarkID==3) telemetry.addData("VuMarkID", "RIGHT");
        else telemetry.addData("VuMarkID", "UNKNOWN");
    }

    public void displayColorNumber(){
        telemetry.addData("ColorNumber: " ,colorNumber);
    }

    public void initializeColorSensor(){
        colorC = hardwareMap.i2cDevice.get("color sensor");
        colorCreader = new I2cDeviceSynchImpl(colorC, I2cAddr.create8bit(0x3c), false);
        colorCreader.engage();
        colorCreader.write8(3, 0);
    }

    public void readColorNumber(){
        colorCcache = colorCreader.read(0x04, 1);
        colorNumber = colorCcache[0];
        telemetry.addData("Color Number", colorNumber);
        if(colorNumber>0) {
            colorSensorFinished=true;
            colorCreader.disengage();
        }
    }
}
